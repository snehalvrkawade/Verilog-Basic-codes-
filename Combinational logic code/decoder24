//==================== DATAFLOW MODEL ====================
/*
module decoder24(input [1:0] I, output [3:0] Y);
  assign Y[0] = ~I[1] & ~I[0];
  assign Y[1] = ~I[1] &  I[0];
  assign Y[2] =  I[1] & ~I[0];
  assign Y[3] =  I[1] &  I[0];
endmodule
*/

//==================== STRUCTURAL MODEL ====================
/*
module decoder24(input [1:0] I, output [3:0] Y);
  wire n0, n1;
  not(n0, I[0]);
  not(n1, I[1]);
  and(Y[0], n1, n0);
  and(Y[1], n1, I[0]);
  and(Y[2], I[1], n0);
  and(Y[3], I[1], I[0]);
endmodule
*/

//==================== BEHAVIORAL MODEL ====================
module decoder24(input [1:0] I, output reg [3:0] Y);
  always @(*) begin
    case(I)
      2'b00: Y = 4'b0001;
      2'b01: Y = 4'b0010;
      2'b10: Y = 4'b0100;
      2'b11: Y = 4'b1000;
      default: Y = 4'b0000;
    endcase
  end
endmodule

//==================== TESTBENCH ====================
module tb;
  reg [1:0] I;
  wire [3:0] Y;

  decoder24 dut(.I(I), .Y(Y));

  initial begin
    $dumpfile("decoder24.vcd");
    $dumpvars(0, tb);
    $monitor("Time=%0t | I=%b | Y=%b", $time, I, Y);

    I = 2'b00; #5;
    I = 2'b01; #5;
    I = 2'b10; #5;
    I = 2'b11; #5;
    $finish;
  end
endmodule
