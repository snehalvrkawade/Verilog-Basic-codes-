//==================== PRIORITY ENCODER ====================
module priority_encoder8x3(input [7:0] I, output reg [2:0] Y, output reg valid);
  always @(*) begin
    casex(I)
      8'b1xxxxxxx: begin Y = 3'b111; valid = 1; end // I7 highest
      8'b01xxxxxx: begin Y = 3'b110; valid = 1; end // I6
      8'b001xxxxx: begin Y = 3'b101; valid = 1; end // I5
      8'b0001xxxx: begin Y = 3'b100; valid = 1; end // I4
      8'b00001xxx: begin Y = 3'b011; valid = 1; end // I3
      8'b000001xx: begin Y = 3'b010; valid = 1; end // I2
      8'b0000001x: begin Y = 3'b001; valid = 1; end // I1
      8'b00000001: begin Y = 3'b000; valid = 1; end // I0
      default:     begin Y = 3'b000; valid = 0; end // no input active
    endcase
  end
endmodule

//==================== TESTBENCH ====================
module tb;
  reg [7:0] I;
  wire [2:0] Y;
  wire valid;

  priority_encoder8x3 dut(.I(I), .Y(Y), .valid(valid));

  initial begin
    $dumpfile("priority_encoder8x3.vcd");
    $dumpvars(0, tb);
    $monitor("Time=%0t | I=%b | Y=%b | valid=%b", $time, I, Y, valid);

    I = 8'b00000001; #5; // I0
    I = 8'b00000010; #5; // I1
    I = 8'b00000100; #5; // I2
    I = 8'b00001000; #5; // I3
    I = 8'b10001000; #5; // I7 & I3 active → I7 priority
    I = 8'b00111111; #5; // I5..I0 active → I5 priority
    I = 8'b00000000; #5; // No input → invalid
    $finish;
  end
endmodule
