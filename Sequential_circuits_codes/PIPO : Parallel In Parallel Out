
// PIPO : Parallel In Parallel Out ------------------//
module pipo(
  input [3:0] p,
  input clk,
  input rst,
  output reg [3:0] q
);
  always @(posedge clk or posedge rst) begin
    if (rst)
      q <= 4'b0000;     // reset condition
    else
      q <= p;           // load parallel input at clk edge
  end
endmodule


// ------------------// Testbench// ------------------//
module tb_pipo;

  reg [3:0] p;
  reg clk, rst;
  wire [3:0] q;

  // Instantiate PIPO
  pipo dut(.p(p), .clk(clk), .rst(rst), .q(q));

  // Clock generation: 10 time-unit period
  initial begin
    clk = 0;
    forever #5 clk = ~clk;
  end

  initial begin
    $dumpfile("pipo.vcd");
    $dumpvars(0, tb_pipo);
    $monitor("T=%0t | p=%b | rst=%b | q=%b", $time, p, rst, q);

    // Reset
    rst = 1; p = 4'b0000; #10;
    rst = 0;

    // Apply parallel data on clock edges
    p = 4'b0001; #10;
    p = 4'b0010; #10;
    p = 4'b0101; #10;
    p = 4'b1011; #10;
    p = 4'b0110; #10;

    #10;
    $finish;
  end

endmodule
