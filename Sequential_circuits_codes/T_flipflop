//================ DATAFLOW =================
module tff_df(input t, input clk, output q, output qb);
  reg q_reg;
  assign q  = q_reg;
  assign qb = ~q_reg;

  always @(posedge clk) begin
    q_reg <= (t) ? ~q_reg : q_reg;  // toggle if T=1, else hold
  end
endmodule


//================ BEHAVIORAL =================
module tff_beh(input t, input clk, output reg q, output qb);
  always @(posedge clk) begin
    if (t)
      q <= ~q;   // toggle
    else
      q <= q;    // hold
  end
  assign qb = ~q;
endmodule


//================ STRUCTURAL =================
module dff(input d, input clk, output reg q);
  always @(posedge clk)
    q <= d;
endmodule

module tff_str(input t, input clk, output q, output qb);
  wire d, q_int;
  assign d = t ? ~q_int : q_int;  // D = TâŠ•Q
  dff d1(.d(d), .clk(clk), .q(q_int));
  assign q  = q_int;
  assign qb = ~q_int;
endmodule


//================ TESTBENCH =================
module tb;
  reg clk, t;
  wire q_df, qb_df;
  wire q_beh, qb_beh;
  wire q_str, qb_str;

  // Instantiate all 3 styles
  tff_df  u1(.t(t), .clk(clk), .q(q_df),  .qb(qb_df));
  tff_beh u2(.t(t), .clk(clk), .q(q_beh), .qb(qb_beh));
  tff_str u3(.t(t), .clk(clk), .q(q_str), .qb(qb_str));

  // clock generation
  initial begin
    clk = 0;
    forever #5 clk = ~clk; // period = 10
  end

  initial begin
    $dumpfile("tff_all.vcd");
    $dumpvars(0, tb);
    $monitor("Time=%0t | T=%b | DF(q=%b,qb=%b) | BEH(q=%b,qb=%b) | STR(q=%b,qb=%b)",
              $time, t, q_df, qb_df, q_beh, qb_beh, q_str, qb_str);

    t=1; #10;   // toggle
    t=0; #10;   // hold
    t=1; #10;   // toggle
    t=1; #10;   // toggle again
    t=0; #10;   // hold

    $finish;
  end
endmodule
