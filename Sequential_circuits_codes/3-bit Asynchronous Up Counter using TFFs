// ------------------
// T Flip-Flop Module
// ------------------
module tff(
    input clk,
    input rst,
    input t,
    output reg q
);
    always @(posedge clk or posedge rst) begin
        if (rst)
            q <= 0;
        else if (t)
            q <= ~q;
    end
endmodule


// ------------------
// 3-bit Asynchronous Up Counter using TFFs
// ------------------
module async_up_counter_tff(
    input clk,
    input rst,
    output [2:0] q
);
    wire q0, q1, q2;

    // TFF instantiation, T=1
    tff t0(.clk(clk), .rst(rst), .t(1'b1), .q(q0));
    tff t1(.clk(q0), .rst(rst), .t(1'b1), .q(q1)); // async, triggered by previous FF
    tff t2(.clk(q1), .rst(rst), .t(1'b1), .q(q2));

    assign q = {q2, q1, q0}; // 3-bit counter output
endmodule


// ------------------
// Testbench
// ------------------
module tb_async_up_tff;

    reg clk, rst;
    wire [2:0] q;

    async_up_counter_tff dut(.clk(clk), .rst(rst), .q(q));

    // Clock generation
    initial begin
        clk = 0;
        forever #5 clk = ~clk;  // period = 10
    end

    initial begin
        $dumpfile("async_up_tff.vcd");
        $dumpvars(0, tb_async_up_tff);
        $monitor("Time=%0t | q=%b | rst=%b", $time, q, rst);

        // Reset active for 1 clock
        rst = 1; #10;
        rst = 0;

        // Run for a few clock cycles
        #160;  // Enough to see full count

        $finish;
    end
endmodule
