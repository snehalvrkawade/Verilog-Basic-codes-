//==================== DATAFLOW MODEL ====================
/*
module even_parity(
  input D,
  output P
);
  assign P = D;  // Even parity for 1-bit input
endmodule
*/

//==================== BEHAVIORAL MODEL (if-else) ====================
/*
module even_parity(
  input D,
  output reg P
);
  always @(*) begin
    if(D==0) P=0;
    else P=1;
  end
endmodule
*/

//==================== BEHAVIORAL MODEL (case) ====================
/*
module even_parity(
  input D,
  output reg P
);
  always @(*) begin
    case(D)
      1'b0: P=0;
      1'b1: P=1;
      default: P=0;
    endcase
  end
endmodule
*/

//==================== STRUCTURAL MODEL ====================
/*
module even_parity(
  input D,
  output P
);
  assign P = D;
endmodule
*/

//==================== TESTBENCH ====================
module tb;
  reg D;
  wire P;

  even_parity dut(.D(D), .P(P));

  initial begin
    $dumpfile("even_parity.vcd");
    $dumpvars(0,tb);
    $monitor("Time=%0t | D=%b | Even Parity P=%b", $time, D, P);

    D=0; #5;
    D=1; #5;

    $finish;
  end
endmodule
